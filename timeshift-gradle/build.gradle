group 'com.yourapp.aspect'
version '1.0'
apply plugin:'java'
apply plugin:'maven'

// Disable the compileJava task and insert the compileAjc task instead
compileJava.enabled = false;

configurations {
    ajc
    provided
    aspects
    ajInpath
}

repositories {
    mavenLocal()
    }

dependencies {
  ajc group:'org.aspectj', name:'aspectjtools', version:'1.8.7'
 
  compile "commons-logging:commons-logging:1.1.3"
  compile group:'log4j', name:'log4j', version:'1.2.17'
  compile group:'org.aspectj', name:'aspectjrt', version:'1.8.7'

  testCompile group:'junit', name:'junit', version:'4.11'
}

task compileAjc(overwrite: true) {

    // Declare the output directory to enable uptodate checks
    outputs.dir sourceSets.main.output.classesDir
    
    doLast{
        // Resolve the AspectJ compiler via dependencies of the ajc configuration
        ant.taskdef( resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
        ant.iajc(source:sourceCompatibility, target:targetCompatibility, 
            destDir:sourceSets.main.output.classesDir,
            maxmem:"512m", 
            fork:"true", 
            // Jars containing aspects to be woven should be declared in the aspects configuration
            aspectPath:configurations.aspects?.asPath, 
            // Jars containing classes where aspects should be woven into should be declared in the ajInpath configuration
            inpath:configurations.ajInpath?.asPath, 
            // Define the compile classpath to include a deps of a 'provided' configuration
            classpath:configurations.compile.asPath + configurations.provided.asPath){    

            sourceroots{
                sourceSets.main.java.srcDirs.each{
                    // The aspectJ compiler does not like nonexisting source roots, so check if they exist
                    if (it.exists()) {
                        pathelement(location:it.absolutePath)
                    }
                }       
            }
            
        }
    }
}

// Link the compileAjc task into the dependency chain
processResources.dependsOn(compileAjc)